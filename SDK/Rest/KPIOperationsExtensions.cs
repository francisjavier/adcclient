// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.DataCatalog.Rest
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for KPIOperations.
    /// </summary>
    public static partial class KPIOperationsExtensions
    {
            /// <summary>
            /// Register KPI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='kpi'>
            /// Register KPI
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static KPIRegisterHeaders Register(this IKPIOperations operations, KPI kpi, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).RegisterAsync(kpi, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register KPI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='kpi'>
            /// Register KPI
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIRegisterHeaders> RegisterAsync(this IKPIOperations operations, KPI kpi, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(kpi, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get KPI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static KPIGet Get(this IKPIOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).GetAsync(viewItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get KPI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIGet> GetAsync(this IKPIOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(viewItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete KPI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIDeleteHeaders Delete(this IKPIOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).DeleteAsync(viewItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete KPI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIDeleteHeaders> DeleteAsync(this IKPIOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(viewItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static KPIAddDescriptionHeaders AddDescription(this IKPIOperations operations, string viewItemId, Description description, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).AddDescriptionAsync(viewItemId, description, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIAddDescriptionHeaders> AddDescriptionAsync(this IKPIOperations operations, string viewItemId, Description description, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddDescriptionWithHttpMessagesAsync(viewItemId, description, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static KPIAddExpertHeaders AddExpert(this IKPIOperations operations, string viewItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).AddExpertAsync(viewItemId, expert, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIAddExpertHeaders> AddExpertAsync(this IKPIOperations operations, string viewItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddExpertWithHttpMessagesAsync(viewItemId, expert, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static KPIAddAccessInstructionHeaders AddAccessInstruction(this IKPIOperations operations, string viewItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).AddAccessInstructionAsync(viewItemId, accessInstruction, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIAddAccessInstructionHeaders> AddAccessInstructionAsync(this IKPIOperations operations, string viewItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddAccessInstructionWithHttpMessagesAsync(viewItemId, accessInstruction, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static KPIAddDocumentationHeaders AddDocumentation(this IKPIOperations operations, string viewItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).AddDocumentationAsync(viewItemId, documentation, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIAddDocumentationHeaders> AddDocumentationAsync(this IKPIOperations operations, string viewItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddDocumentationWithHttpMessagesAsync(viewItemId, documentation, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static KPIAddFriendlyNameHeaders AddFriendlyName(this IKPIOperations operations, string viewItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).AddFriendlyNameAsync(viewItemId, friendlyName, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIAddFriendlyNameHeaders> AddFriendlyNameAsync(this IKPIOperations operations, string viewItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddFriendlyNameWithHttpMessagesAsync(viewItemId, friendlyName, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static KPIAddTagHeaders AddTag(this IKPIOperations operations, string viewItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).AddTagAsync(viewItemId, tag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIAddTagHeaders> AddTagAsync(this IKPIOperations operations, string viewItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddTagWithHttpMessagesAsync(viewItemId, tag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static KPIAddTermTagHeaders AddTermTag(this IKPIOperations operations, string viewItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).AddTermTagAsync(viewItemId, termTag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIAddTermTagHeaders> AddTermTagAsync(this IKPIOperations operations, string viewItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddTermTagWithHttpMessagesAsync(viewItemId, termTag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIUpdateDescriptionHeaders UpdateDescription(this IKPIOperations operations, string viewItemId, string annotationItemId, Description description, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).UpdateDescriptionAsync(viewItemId, annotationItemId, description, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIUpdateDescriptionHeaders> UpdateDescriptionAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Description description, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, description, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static DescriptionGet GetDescription(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).GetDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DescriptionGet> GetDescriptionAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIDeleteDescriptionHeaders DeleteDescription(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).DeleteDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIDeleteDescriptionHeaders> DeleteDescriptionAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIUpdateExpertHeaders UpdateExpert(this IKPIOperations operations, string viewItemId, string annotationItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).UpdateExpertAsync(viewItemId, annotationItemId, expert, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIUpdateExpertHeaders> UpdateExpertAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateExpertWithHttpMessagesAsync(viewItemId, annotationItemId, expert, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ExpertGet GetExpert(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).GetExpertAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ExpertGet> GetExpertAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetExpertWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIDeleteExpertHeaders DeleteExpert(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).DeleteExpertAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIDeleteExpertHeaders> DeleteExpertAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteExpertWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIUpdateAccessInstructionHeaders UpdateAccessInstruction(this IKPIOperations operations, string viewItemId, string annotationItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).UpdateAccessInstructionAsync(viewItemId, annotationItemId, accessInstruction, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIUpdateAccessInstructionHeaders> UpdateAccessInstructionAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, accessInstruction, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static AccessInstructionGet GetAccessInstruction(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).GetAccessInstructionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AccessInstructionGet> GetAccessInstructionAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIDeleteAccessInstructionHeaders DeleteAccessInstruction(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).DeleteAccessInstructionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIDeleteAccessInstructionHeaders> DeleteAccessInstructionAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIUpdateDocumentationHeaders UpdateDocumentation(this IKPIOperations operations, string viewItemId, string annotationItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).UpdateDocumentationAsync(viewItemId, annotationItemId, documentation, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIUpdateDocumentationHeaders> UpdateDocumentationAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, documentation, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static DocumentationGet GetDocumentation(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).GetDocumentationAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DocumentationGet> GetDocumentationAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIDeleteDocumentationHeaders DeleteDocumentation(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).DeleteDocumentationAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIDeleteDocumentationHeaders> DeleteDocumentationAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIUpdateFriendlyNameHeaders UpdateFriendlyName(this IKPIOperations operations, string viewItemId, string annotationItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).UpdateFriendlyNameAsync(viewItemId, annotationItemId, friendlyName, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIUpdateFriendlyNameHeaders> UpdateFriendlyNameAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, friendlyName, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static FriendlyNameGet GetFriendlyName(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).GetFriendlyNameAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<FriendlyNameGet> GetFriendlyNameAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIDeleteFriendlyNameHeaders DeleteFriendlyName(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).DeleteFriendlyNameAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIDeleteFriendlyNameHeaders> DeleteFriendlyNameAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIUpdateTagHeaders UpdateTag(this IKPIOperations operations, string viewItemId, string annotationItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).UpdateTagAsync(viewItemId, annotationItemId, tag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIUpdateTagHeaders> UpdateTagAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateTagWithHttpMessagesAsync(viewItemId, annotationItemId, tag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TagGet GetTag(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).GetTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TagGet> GetTagAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIDeleteTagHeaders DeleteTag(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).DeleteTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIDeleteTagHeaders> DeleteTagAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIUpdateTermTagHeaders UpdateTermTag(this IKPIOperations operations, string viewItemId, string annotationItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).UpdateTermTagAsync(viewItemId, annotationItemId, termTag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIUpdateTermTagHeaders> UpdateTermTagAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, termTag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TermTagGet GetTermTag(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).GetTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TermTagGet> GetTermTagAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static KPIDeleteTermTagHeaders DeleteTermTag(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IKPIOperations)s).DeleteTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<KPIDeleteTermTagHeaders> DeleteTermTagAsync(this IKPIOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
