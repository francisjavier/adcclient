// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.DataCatalog.Rest
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for TableOperations.
    /// </summary>
    public static partial class TableOperationsExtensions
    {
            /// <summary>
            /// Register Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Register Table
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableRegisterHeaders Register(this ITableOperations operations, Table table, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).RegisterAsync(table, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Register Table
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableRegisterHeaders> RegisterAsync(this ITableOperations operations, Table table, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(table, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableGet Get(this ITableOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetAsync(viewItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableGet> GetAsync(this ITableOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(viewItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteHeaders Delete(this ITableOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteAsync(viewItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteHeaders> DeleteAsync(this ITableOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(viewItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddDescriptionHeaders AddDescription(this ITableOperations operations, string viewItemId, Description description, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddDescriptionAsync(viewItemId, description, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddDescriptionHeaders> AddDescriptionAsync(this ITableOperations operations, string viewItemId, Description description, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddDescriptionWithHttpMessagesAsync(viewItemId, description, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddExpertHeaders AddExpert(this ITableOperations operations, string viewItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddExpertAsync(viewItemId, expert, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddExpertHeaders> AddExpertAsync(this ITableOperations operations, string viewItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddExpertWithHttpMessagesAsync(viewItemId, expert, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddAccessInstructionHeaders AddAccessInstruction(this ITableOperations operations, string viewItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddAccessInstructionAsync(viewItemId, accessInstruction, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddAccessInstructionHeaders> AddAccessInstructionAsync(this ITableOperations operations, string viewItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddAccessInstructionWithHttpMessagesAsync(viewItemId, accessInstruction, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddDocumentationHeaders AddDocumentation(this ITableOperations operations, string viewItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddDocumentationAsync(viewItemId, documentation, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddDocumentationHeaders> AddDocumentationAsync(this ITableOperations operations, string viewItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddDocumentationWithHttpMessagesAsync(viewItemId, documentation, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddFriendlyNameHeaders AddFriendlyName(this ITableOperations operations, string viewItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddFriendlyNameAsync(viewItemId, friendlyName, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddFriendlyNameHeaders> AddFriendlyNameAsync(this ITableOperations operations, string viewItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddFriendlyNameWithHttpMessagesAsync(viewItemId, friendlyName, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddTagHeaders AddTag(this ITableOperations operations, string viewItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddTagAsync(viewItemId, tag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddTagHeaders> AddTagAsync(this ITableOperations operations, string viewItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddTagWithHttpMessagesAsync(viewItemId, tag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddTermTagHeaders AddTermTag(this ITableOperations operations, string viewItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddTermTagAsync(viewItemId, termTag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddTermTagHeaders> AddTermTagAsync(this ITableOperations operations, string viewItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddTermTagWithHttpMessagesAsync(viewItemId, termTag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='schema'>
            /// schema payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddSchemaHeaders AddSchema(this ITableOperations operations, string viewItemId, Schema schema, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddSchemaAsync(viewItemId, schema, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='schema'>
            /// schema payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddSchemaHeaders> AddSchemaAsync(this ITableOperations operations, string viewItemId, Schema schema, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddSchemaWithHttpMessagesAsync(viewItemId, schema, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='preview'>
            /// preview payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddPreviewHeaders AddPreview(this ITableOperations operations, string viewItemId, Preview preview, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddPreviewAsync(viewItemId, preview, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='preview'>
            /// preview payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddPreviewHeaders> AddPreviewAsync(this ITableOperations operations, string viewItemId, Preview preview, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddPreviewWithHttpMessagesAsync(viewItemId, preview, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add DataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tableDataProfile'>
            /// tabledataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddDataProfileHeaders AddDataProfile(this ITableOperations operations, string viewItemId, TableDataProfile tableDataProfile, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddDataProfileAsync(viewItemId, tableDataProfile, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add DataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tableDataProfile'>
            /// tabledataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddDataProfileHeaders> AddDataProfileAsync(this ITableOperations operations, string viewItemId, TableDataProfile tableDataProfile, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddDataProfileWithHttpMessagesAsync(viewItemId, tableDataProfile, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnsDataProfile'>
            /// columnsdataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddColumnsDataProfileHeaders AddColumnsDataProfile(this ITableOperations operations, string viewItemId, ColumnsDataProfile columnsDataProfile, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddColumnsDataProfileAsync(viewItemId, columnsDataProfile, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnsDataProfile'>
            /// columnsdataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddColumnsDataProfileHeaders> AddColumnsDataProfileAsync(this ITableOperations operations, string viewItemId, ColumnsDataProfile columnsDataProfile, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddColumnsDataProfileWithHttpMessagesAsync(viewItemId, columnsDataProfile, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add ColumnDataClassification
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnDataClassification'>
            /// columndataclassification payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddColumnDataClassificationHeaders AddColumnDataClassification(this ITableOperations operations, string viewItemId, ColumnDataClassification columnDataClassification, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddColumnDataClassificationAsync(viewItemId, columnDataClassification, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add ColumnDataClassification
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnDataClassification'>
            /// columndataclassification payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddColumnDataClassificationHeaders> AddColumnDataClassificationAsync(this ITableOperations operations, string viewItemId, ColumnDataClassification columnDataClassification, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddColumnDataClassificationWithHttpMessagesAsync(viewItemId, columnDataClassification, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnDescription'>
            /// columndescription payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddColumnDescriptionHeaders AddColumnDescription(this ITableOperations operations, string viewItemId, ColumnDescription columnDescription, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddColumnDescriptionAsync(viewItemId, columnDescription, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnDescription'>
            /// columndescription payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddColumnDescriptionHeaders> AddColumnDescriptionAsync(this ITableOperations operations, string viewItemId, ColumnDescription columnDescription, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddColumnDescriptionWithHttpMessagesAsync(viewItemId, columnDescription, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnTag'>
            /// columntag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddColumnTagHeaders AddColumnTag(this ITableOperations operations, string viewItemId, ColumnTag columnTag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddColumnTagAsync(viewItemId, columnTag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnTag'>
            /// columntag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddColumnTagHeaders> AddColumnTagAsync(this ITableOperations operations, string viewItemId, ColumnTag columnTag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddColumnTagWithHttpMessagesAsync(viewItemId, columnTag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnTermTag'>
            /// columntermtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddColumnTermTagHeaders AddColumnTermTag(this ITableOperations operations, string viewItemId, ColumnTermTag columnTermTag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddColumnTermTagAsync(viewItemId, columnTermTag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnTermTag'>
            /// columntermtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddColumnTermTagHeaders> AddColumnTermTagAsync(this ITableOperations operations, string viewItemId, ColumnTermTag columnTermTag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddColumnTermTagWithHttpMessagesAsync(viewItemId, columnTermTag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add OfficeTelemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='officeTelemetry'>
            /// officetelemetry payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddOfficeTelemetryHeaders AddOfficeTelemetry(this ITableOperations operations, string viewItemId, OfficeTelemetry officeTelemetry, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddOfficeTelemetryAsync(viewItemId, officeTelemetry, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add OfficeTelemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='officeTelemetry'>
            /// officetelemetry payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddOfficeTelemetryHeaders> AddOfficeTelemetryAsync(this ITableOperations operations, string viewItemId, OfficeTelemetry officeTelemetry, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddOfficeTelemetryWithHttpMessagesAsync(viewItemId, officeTelemetry, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add OfficeTelemetryRule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='officeTelemetryRule'>
            /// officetelemetryrule payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableAddOfficeTelemetryRuleHeaders AddOfficeTelemetryRule(this ITableOperations operations, string viewItemId, OfficeTelemetryRule officeTelemetryRule, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).AddOfficeTelemetryRuleAsync(viewItemId, officeTelemetryRule, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add OfficeTelemetryRule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='officeTelemetryRule'>
            /// officetelemetryrule payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableAddOfficeTelemetryRuleHeaders> AddOfficeTelemetryRuleAsync(this ITableOperations operations, string viewItemId, OfficeTelemetryRule officeTelemetryRule, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddOfficeTelemetryRuleWithHttpMessagesAsync(viewItemId, officeTelemetryRule, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateDescriptionHeaders UpdateDescription(this ITableOperations operations, string viewItemId, string annotationItemId, Description description, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateDescriptionAsync(viewItemId, annotationItemId, description, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateDescriptionHeaders> UpdateDescriptionAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Description description, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, description, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static DescriptionGet GetDescription(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DescriptionGet> GetDescriptionAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteDescriptionHeaders DeleteDescription(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteDescriptionHeaders> DeleteDescriptionAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateExpertHeaders UpdateExpert(this ITableOperations operations, string viewItemId, string annotationItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateExpertAsync(viewItemId, annotationItemId, expert, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateExpertHeaders> UpdateExpertAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateExpertWithHttpMessagesAsync(viewItemId, annotationItemId, expert, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ExpertGet GetExpert(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetExpertAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ExpertGet> GetExpertAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetExpertWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteExpertHeaders DeleteExpert(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteExpertAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteExpertHeaders> DeleteExpertAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteExpertWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateAccessInstructionHeaders UpdateAccessInstruction(this ITableOperations operations, string viewItemId, string annotationItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateAccessInstructionAsync(viewItemId, annotationItemId, accessInstruction, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateAccessInstructionHeaders> UpdateAccessInstructionAsync(this ITableOperations operations, string viewItemId, string annotationItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, accessInstruction, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static AccessInstructionGet GetAccessInstruction(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetAccessInstructionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AccessInstructionGet> GetAccessInstructionAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteAccessInstructionHeaders DeleteAccessInstruction(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteAccessInstructionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteAccessInstructionHeaders> DeleteAccessInstructionAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateDocumentationHeaders UpdateDocumentation(this ITableOperations operations, string viewItemId, string annotationItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateDocumentationAsync(viewItemId, annotationItemId, documentation, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateDocumentationHeaders> UpdateDocumentationAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, documentation, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static DocumentationGet GetDocumentation(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetDocumentationAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DocumentationGet> GetDocumentationAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteDocumentationHeaders DeleteDocumentation(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteDocumentationAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteDocumentationHeaders> DeleteDocumentationAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateFriendlyNameHeaders UpdateFriendlyName(this ITableOperations operations, string viewItemId, string annotationItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateFriendlyNameAsync(viewItemId, annotationItemId, friendlyName, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateFriendlyNameHeaders> UpdateFriendlyNameAsync(this ITableOperations operations, string viewItemId, string annotationItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, friendlyName, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static FriendlyNameGet GetFriendlyName(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetFriendlyNameAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<FriendlyNameGet> GetFriendlyNameAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteFriendlyNameHeaders DeleteFriendlyName(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteFriendlyNameAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteFriendlyNameHeaders> DeleteFriendlyNameAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateTagHeaders UpdateTag(this ITableOperations operations, string viewItemId, string annotationItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateTagAsync(viewItemId, annotationItemId, tag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateTagHeaders> UpdateTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateTagWithHttpMessagesAsync(viewItemId, annotationItemId, tag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TagGet GetTag(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TagGet> GetTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteTagHeaders DeleteTag(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteTagHeaders> DeleteTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateTermTagHeaders UpdateTermTag(this ITableOperations operations, string viewItemId, string annotationItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateTermTagAsync(viewItemId, annotationItemId, termTag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateTermTagHeaders> UpdateTermTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, termTag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TermTagGet GetTermTag(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TermTagGet> GetTermTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteTermTagHeaders DeleteTermTag(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteTermTagHeaders> DeleteTermTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='schema'>
            /// schema payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateSchemaHeaders UpdateSchema(this ITableOperations operations, string viewItemId, string annotationItemId, Schema schema, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateSchemaAsync(viewItemId, annotationItemId, schema, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='schema'>
            /// schema payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateSchemaHeaders> UpdateSchemaAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Schema schema, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateSchemaWithHttpMessagesAsync(viewItemId, annotationItemId, schema, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static SchemaGet GetSchema(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetSchemaAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SchemaGet> GetSchemaAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSchemaWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteSchemaHeaders DeleteSchema(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteSchemaAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteSchemaHeaders> DeleteSchemaAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteSchemaWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='preview'>
            /// preview payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdatePreviewHeaders UpdatePreview(this ITableOperations operations, string viewItemId, string annotationItemId, Preview preview, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdatePreviewAsync(viewItemId, annotationItemId, preview, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='preview'>
            /// preview payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdatePreviewHeaders> UpdatePreviewAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Preview preview, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdatePreviewWithHttpMessagesAsync(viewItemId, annotationItemId, preview, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static PreviewGet GetPreview(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetPreviewAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PreviewGet> GetPreviewAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetPreviewWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeletePreviewHeaders DeletePreview(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeletePreviewAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeletePreviewHeaders> DeletePreviewAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeletePreviewWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update DataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tableDataProfile'>
            /// tabledataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateDataProfileHeaders UpdateDataProfile(this ITableOperations operations, string viewItemId, string annotationItemId, TableDataProfile tableDataProfile, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateDataProfileAsync(viewItemId, annotationItemId, tableDataProfile, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update DataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tableDataProfile'>
            /// tabledataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateDataProfileHeaders> UpdateDataProfileAsync(this ITableOperations operations, string viewItemId, string annotationItemId, TableDataProfile tableDataProfile, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, tableDataProfile, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get DataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableDataProfileGet GetDataProfile(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetDataProfileAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get DataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDataProfileGet> GetDataProfileAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete DataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteDataProfileHeaders DeleteDataProfile(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteDataProfileAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete DataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteDataProfileHeaders> DeleteDataProfileAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnsDataProfile'>
            /// columnsdataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateColumnsDataProfileHeaders UpdateColumnsDataProfile(this ITableOperations operations, string viewItemId, string annotationItemId, ColumnsDataProfile columnsDataProfile, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateColumnsDataProfileAsync(viewItemId, annotationItemId, columnsDataProfile, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnsDataProfile'>
            /// columnsdataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateColumnsDataProfileHeaders> UpdateColumnsDataProfileAsync(this ITableOperations operations, string viewItemId, string annotationItemId, ColumnsDataProfile columnsDataProfile, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateColumnsDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, columnsDataProfile, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ColumnsDataProfileGet GetColumnsDataProfile(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetColumnsDataProfileAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ColumnsDataProfileGet> GetColumnsDataProfileAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetColumnsDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteColumnsDataProfileHeaders DeleteColumnsDataProfile(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteColumnsDataProfileAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteColumnsDataProfileHeaders> DeleteColumnsDataProfileAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteColumnsDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update ColumnDataClassification
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnDataClassification'>
            /// columndataclassification payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateColumnDataClassificationHeaders UpdateColumnDataClassification(this ITableOperations operations, string viewItemId, string annotationItemId, ColumnDataClassification columnDataClassification, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateColumnDataClassificationAsync(viewItemId, annotationItemId, columnDataClassification, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update ColumnDataClassification
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnDataClassification'>
            /// columndataclassification payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateColumnDataClassificationHeaders> UpdateColumnDataClassificationAsync(this ITableOperations operations, string viewItemId, string annotationItemId, ColumnDataClassification columnDataClassification, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateColumnDataClassificationWithHttpMessagesAsync(viewItemId, annotationItemId, columnDataClassification, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get ColumnDataClassification
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ColumnDataClassificationGet GetColumnDataClassification(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetColumnDataClassificationAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get ColumnDataClassification
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ColumnDataClassificationGet> GetColumnDataClassificationAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetColumnDataClassificationWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete ColumnDataClassification
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteColumnDataClassificationHeaders DeleteColumnDataClassification(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteColumnDataClassificationAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete ColumnDataClassification
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteColumnDataClassificationHeaders> DeleteColumnDataClassificationAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteColumnDataClassificationWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnDescription'>
            /// columndescription payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateColumnDescriptionHeaders UpdateColumnDescription(this ITableOperations operations, string viewItemId, string annotationItemId, ColumnDescription columnDescription, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateColumnDescriptionAsync(viewItemId, annotationItemId, columnDescription, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnDescription'>
            /// columndescription payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateColumnDescriptionHeaders> UpdateColumnDescriptionAsync(this ITableOperations operations, string viewItemId, string annotationItemId, ColumnDescription columnDescription, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateColumnDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, columnDescription, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ColumnDescriptionGet GetColumnDescription(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetColumnDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ColumnDescriptionGet> GetColumnDescriptionAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetColumnDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteColumnDescriptionHeaders DeleteColumnDescription(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteColumnDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteColumnDescriptionHeaders> DeleteColumnDescriptionAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteColumnDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnTag'>
            /// columntag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateColumnTagHeaders UpdateColumnTag(this ITableOperations operations, string viewItemId, string annotationItemId, ColumnTag columnTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateColumnTagAsync(viewItemId, annotationItemId, columnTag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnTag'>
            /// columntag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateColumnTagHeaders> UpdateColumnTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, ColumnTag columnTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateColumnTagWithHttpMessagesAsync(viewItemId, annotationItemId, columnTag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ColumnTagGet GetColumnTag(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetColumnTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ColumnTagGet> GetColumnTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetColumnTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteColumnTagHeaders DeleteColumnTag(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteColumnTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteColumnTagHeaders> DeleteColumnTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteColumnTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnTermTag'>
            /// columntermtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateColumnTermTagHeaders UpdateColumnTermTag(this ITableOperations operations, string viewItemId, string annotationItemId, ColumnTermTag columnTermTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateColumnTermTagAsync(viewItemId, annotationItemId, columnTermTag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnTermTag'>
            /// columntermtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateColumnTermTagHeaders> UpdateColumnTermTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, ColumnTermTag columnTermTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateColumnTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, columnTermTag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ColumnTermTagGet GetColumnTermTag(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetColumnTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ColumnTermTagGet> GetColumnTermTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetColumnTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteColumnTermTagHeaders DeleteColumnTermTag(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteColumnTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteColumnTermTagHeaders> DeleteColumnTermTagAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteColumnTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update OfficeTelemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='officeTelemetry'>
            /// officetelemetry payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateOfficeTelemetryHeaders UpdateOfficeTelemetry(this ITableOperations operations, string viewItemId, string annotationItemId, OfficeTelemetry officeTelemetry, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateOfficeTelemetryAsync(viewItemId, annotationItemId, officeTelemetry, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update OfficeTelemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='officeTelemetry'>
            /// officetelemetry payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateOfficeTelemetryHeaders> UpdateOfficeTelemetryAsync(this ITableOperations operations, string viewItemId, string annotationItemId, OfficeTelemetry officeTelemetry, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateOfficeTelemetryWithHttpMessagesAsync(viewItemId, annotationItemId, officeTelemetry, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get OfficeTelemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static OfficeTelemetryGet GetOfficeTelemetry(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetOfficeTelemetryAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get OfficeTelemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<OfficeTelemetryGet> GetOfficeTelemetryAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetOfficeTelemetryWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete OfficeTelemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteOfficeTelemetryHeaders DeleteOfficeTelemetry(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteOfficeTelemetryAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete OfficeTelemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteOfficeTelemetryHeaders> DeleteOfficeTelemetryAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteOfficeTelemetryWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update OfficeTelemetryRule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='officeTelemetryRule'>
            /// officetelemetryrule payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableUpdateOfficeTelemetryRuleHeaders UpdateOfficeTelemetryRule(this ITableOperations operations, string viewItemId, string annotationItemId, OfficeTelemetryRule officeTelemetryRule, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).UpdateOfficeTelemetryRuleAsync(viewItemId, annotationItemId, officeTelemetryRule, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update OfficeTelemetryRule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='officeTelemetryRule'>
            /// officetelemetryrule payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableUpdateOfficeTelemetryRuleHeaders> UpdateOfficeTelemetryRuleAsync(this ITableOperations operations, string viewItemId, string annotationItemId, OfficeTelemetryRule officeTelemetryRule, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateOfficeTelemetryRuleWithHttpMessagesAsync(viewItemId, annotationItemId, officeTelemetryRule, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get OfficeTelemetryRule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static OfficeTelemetryRuleGet GetOfficeTelemetryRule(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).GetOfficeTelemetryRuleAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get OfficeTelemetryRule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<OfficeTelemetryRuleGet> GetOfficeTelemetryRuleAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetOfficeTelemetryRuleWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete OfficeTelemetryRule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static TableDeleteOfficeTelemetryRuleHeaders DeleteOfficeTelemetryRule(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITableOperations)s).DeleteOfficeTelemetryRuleAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete OfficeTelemetryRule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDeleteOfficeTelemetryRuleHeaders> DeleteOfficeTelemetryRuleAsync(this ITableOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteOfficeTelemetryRuleWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
