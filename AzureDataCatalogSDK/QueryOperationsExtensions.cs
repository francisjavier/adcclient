// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.DataCatalog.Rest
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for QueryOperations.
    /// </summary>
    public static partial class QueryOperationsExtensions
    {
            /// <summary>
            /// Register Query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// Register Query
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryRegisterHeaders Register(this IQueryOperations operations, Query query, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).RegisterAsync(query, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register Query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// Register Query
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryRegisterHeaders> RegisterAsync(this IQueryOperations operations, Query query, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(query, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryGet Get(this IQueryOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetAsync(viewItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryGet> GetAsync(this IQueryOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(viewItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteHeaders Delete(this IQueryOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteAsync(viewItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Query
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteHeaders> DeleteAsync(this IQueryOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(viewItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddDescriptionHeaders AddDescription(this IQueryOperations operations, string viewItemId, Description description, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddDescriptionAsync(viewItemId, description, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddDescriptionHeaders> AddDescriptionAsync(this IQueryOperations operations, string viewItemId, Description description, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddDescriptionWithHttpMessagesAsync(viewItemId, description, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddExpertHeaders AddExpert(this IQueryOperations operations, string viewItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddExpertAsync(viewItemId, expert, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddExpertHeaders> AddExpertAsync(this IQueryOperations operations, string viewItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddExpertWithHttpMessagesAsync(viewItemId, expert, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddAccessInstructionHeaders AddAccessInstruction(this IQueryOperations operations, string viewItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddAccessInstructionAsync(viewItemId, accessInstruction, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddAccessInstructionHeaders> AddAccessInstructionAsync(this IQueryOperations operations, string viewItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddAccessInstructionWithHttpMessagesAsync(viewItemId, accessInstruction, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddDocumentationHeaders AddDocumentation(this IQueryOperations operations, string viewItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddDocumentationAsync(viewItemId, documentation, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddDocumentationHeaders> AddDocumentationAsync(this IQueryOperations operations, string viewItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddDocumentationWithHttpMessagesAsync(viewItemId, documentation, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddFriendlyNameHeaders AddFriendlyName(this IQueryOperations operations, string viewItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddFriendlyNameAsync(viewItemId, friendlyName, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddFriendlyNameHeaders> AddFriendlyNameAsync(this IQueryOperations operations, string viewItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddFriendlyNameWithHttpMessagesAsync(viewItemId, friendlyName, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddTagHeaders AddTag(this IQueryOperations operations, string viewItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddTagAsync(viewItemId, tag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddTagHeaders> AddTagAsync(this IQueryOperations operations, string viewItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddTagWithHttpMessagesAsync(viewItemId, tag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddTermTagHeaders AddTermTag(this IQueryOperations operations, string viewItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddTermTagAsync(viewItemId, termTag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddTermTagHeaders> AddTermTagAsync(this IQueryOperations operations, string viewItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddTermTagWithHttpMessagesAsync(viewItemId, termTag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='schema'>
            /// schema payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddSchemaHeaders AddSchema(this IQueryOperations operations, string viewItemId, Schema schema, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddSchemaAsync(viewItemId, schema, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='schema'>
            /// schema payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddSchemaHeaders> AddSchemaAsync(this IQueryOperations operations, string viewItemId, Schema schema, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddSchemaWithHttpMessagesAsync(viewItemId, schema, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='preview'>
            /// preview payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddPreviewHeaders AddPreview(this IQueryOperations operations, string viewItemId, Preview preview, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddPreviewAsync(viewItemId, preview, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='preview'>
            /// preview payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddPreviewHeaders> AddPreviewAsync(this IQueryOperations operations, string viewItemId, Preview preview, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddPreviewWithHttpMessagesAsync(viewItemId, preview, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add TableDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tableDataProfile'>
            /// tabledataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddTableDataProfileHeaders AddTableDataProfile(this IQueryOperations operations, string viewItemId, TableDataProfile tableDataProfile, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddTableDataProfileAsync(viewItemId, tableDataProfile, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add TableDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tableDataProfile'>
            /// tabledataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddTableDataProfileHeaders> AddTableDataProfileAsync(this IQueryOperations operations, string viewItemId, TableDataProfile tableDataProfile, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddTableDataProfileWithHttpMessagesAsync(viewItemId, tableDataProfile, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnsDataProfile'>
            /// columnsdataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddColumnsDataProfileHeaders AddColumnsDataProfile(this IQueryOperations operations, string viewItemId, ColumnsDataProfile columnsDataProfile, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddColumnsDataProfileAsync(viewItemId, columnsDataProfile, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnsDataProfile'>
            /// columnsdataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddColumnsDataProfileHeaders> AddColumnsDataProfileAsync(this IQueryOperations operations, string viewItemId, ColumnsDataProfile columnsDataProfile, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddColumnsDataProfileWithHttpMessagesAsync(viewItemId, columnsDataProfile, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnDescription'>
            /// columndescription payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddColumnDescriptionHeaders AddColumnDescription(this IQueryOperations operations, string viewItemId, ColumnDescription columnDescription, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddColumnDescriptionAsync(viewItemId, columnDescription, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnDescription'>
            /// columndescription payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddColumnDescriptionHeaders> AddColumnDescriptionAsync(this IQueryOperations operations, string viewItemId, ColumnDescription columnDescription, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddColumnDescriptionWithHttpMessagesAsync(viewItemId, columnDescription, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnTag'>
            /// columntag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddColumnTagHeaders AddColumnTag(this IQueryOperations operations, string viewItemId, ColumnTag columnTag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddColumnTagAsync(viewItemId, columnTag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnTag'>
            /// columntag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddColumnTagHeaders> AddColumnTagAsync(this IQueryOperations operations, string viewItemId, ColumnTag columnTag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddColumnTagWithHttpMessagesAsync(viewItemId, columnTag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnTermTag'>
            /// columntermtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddColumnTermTagHeaders AddColumnTermTag(this IQueryOperations operations, string viewItemId, ColumnTermTag columnTermTag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddColumnTermTagAsync(viewItemId, columnTermTag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='columnTermTag'>
            /// columntermtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddColumnTermTagHeaders> AddColumnTermTagAsync(this IQueryOperations operations, string viewItemId, ColumnTermTag columnTermTag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddColumnTermTagWithHttpMessagesAsync(viewItemId, columnTermTag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Power
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='powerQuery'>
            /// powerquery payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static QueryAddPowerHeaders AddPower(this IQueryOperations operations, string viewItemId, PowerQuery powerQuery, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).AddPowerAsync(viewItemId, powerQuery, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Power
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='powerQuery'>
            /// powerquery payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryAddPowerHeaders> AddPowerAsync(this IQueryOperations operations, string viewItemId, PowerQuery powerQuery, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddPowerWithHttpMessagesAsync(viewItemId, powerQuery, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateDescriptionHeaders UpdateDescription(this IQueryOperations operations, string viewItemId, string annotationItemId, Description description, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateDescriptionAsync(viewItemId, annotationItemId, description, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateDescriptionHeaders> UpdateDescriptionAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Description description, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, description, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static DescriptionGet GetDescription(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DescriptionGet> GetDescriptionAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteDescriptionHeaders DeleteDescription(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteDescriptionHeaders> DeleteDescriptionAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateExpertHeaders UpdateExpert(this IQueryOperations operations, string viewItemId, string annotationItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateExpertAsync(viewItemId, annotationItemId, expert, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateExpertHeaders> UpdateExpertAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateExpertWithHttpMessagesAsync(viewItemId, annotationItemId, expert, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ExpertGet GetExpert(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetExpertAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ExpertGet> GetExpertAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetExpertWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteExpertHeaders DeleteExpert(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteExpertAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteExpertHeaders> DeleteExpertAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteExpertWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateAccessInstructionHeaders UpdateAccessInstruction(this IQueryOperations operations, string viewItemId, string annotationItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateAccessInstructionAsync(viewItemId, annotationItemId, accessInstruction, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateAccessInstructionHeaders> UpdateAccessInstructionAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, accessInstruction, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static AccessInstructionGet GetAccessInstruction(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetAccessInstructionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AccessInstructionGet> GetAccessInstructionAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteAccessInstructionHeaders DeleteAccessInstruction(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteAccessInstructionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteAccessInstructionHeaders> DeleteAccessInstructionAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateDocumentationHeaders UpdateDocumentation(this IQueryOperations operations, string viewItemId, string annotationItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateDocumentationAsync(viewItemId, annotationItemId, documentation, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateDocumentationHeaders> UpdateDocumentationAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, documentation, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static DocumentationGet GetDocumentation(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetDocumentationAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DocumentationGet> GetDocumentationAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteDocumentationHeaders DeleteDocumentation(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteDocumentationAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteDocumentationHeaders> DeleteDocumentationAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateFriendlyNameHeaders UpdateFriendlyName(this IQueryOperations operations, string viewItemId, string annotationItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateFriendlyNameAsync(viewItemId, annotationItemId, friendlyName, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateFriendlyNameHeaders> UpdateFriendlyNameAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, friendlyName, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static FriendlyNameGet GetFriendlyName(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetFriendlyNameAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<FriendlyNameGet> GetFriendlyNameAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteFriendlyNameHeaders DeleteFriendlyName(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteFriendlyNameAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteFriendlyNameHeaders> DeleteFriendlyNameAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateTagHeaders UpdateTag(this IQueryOperations operations, string viewItemId, string annotationItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateTagAsync(viewItemId, annotationItemId, tag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateTagHeaders> UpdateTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateTagWithHttpMessagesAsync(viewItemId, annotationItemId, tag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TagGet GetTag(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TagGet> GetTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteTagHeaders DeleteTag(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteTagHeaders> DeleteTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateTermTagHeaders UpdateTermTag(this IQueryOperations operations, string viewItemId, string annotationItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateTermTagAsync(viewItemId, annotationItemId, termTag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateTermTagHeaders> UpdateTermTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, termTag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TermTagGet GetTermTag(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TermTagGet> GetTermTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteTermTagHeaders DeleteTermTag(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteTermTagHeaders> DeleteTermTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='schema'>
            /// schema payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateSchemaHeaders UpdateSchema(this IQueryOperations operations, string viewItemId, string annotationItemId, Schema schema, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateSchemaAsync(viewItemId, annotationItemId, schema, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='schema'>
            /// schema payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateSchemaHeaders> UpdateSchemaAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Schema schema, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateSchemaWithHttpMessagesAsync(viewItemId, annotationItemId, schema, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static SchemaGet GetSchema(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetSchemaAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SchemaGet> GetSchemaAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSchemaWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteSchemaHeaders DeleteSchema(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteSchemaAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteSchemaHeaders> DeleteSchemaAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteSchemaWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='preview'>
            /// preview payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdatePreviewHeaders UpdatePreview(this IQueryOperations operations, string viewItemId, string annotationItemId, Preview preview, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdatePreviewAsync(viewItemId, annotationItemId, preview, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='preview'>
            /// preview payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdatePreviewHeaders> UpdatePreviewAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Preview preview, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdatePreviewWithHttpMessagesAsync(viewItemId, annotationItemId, preview, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static PreviewGet GetPreview(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetPreviewAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PreviewGet> GetPreviewAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetPreviewWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeletePreviewHeaders DeletePreview(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeletePreviewAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Preview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeletePreviewHeaders> DeletePreviewAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeletePreviewWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update TableDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tableDataProfile'>
            /// tabledataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateTableDataProfileHeaders UpdateTableDataProfile(this IQueryOperations operations, string viewItemId, string annotationItemId, TableDataProfile tableDataProfile, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateTableDataProfileAsync(viewItemId, annotationItemId, tableDataProfile, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update TableDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tableDataProfile'>
            /// tabledataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateTableDataProfileHeaders> UpdateTableDataProfileAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, TableDataProfile tableDataProfile, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateTableDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, tableDataProfile, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get TableDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TableDataProfileGet GetTableDataProfile(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetTableDataProfileAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get TableDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TableDataProfileGet> GetTableDataProfileAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTableDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete TableDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteTableDataProfileHeaders DeleteTableDataProfile(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteTableDataProfileAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete TableDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteTableDataProfileHeaders> DeleteTableDataProfileAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTableDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnsDataProfile'>
            /// columnsdataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateColumnsDataProfileHeaders UpdateColumnsDataProfile(this IQueryOperations operations, string viewItemId, string annotationItemId, ColumnsDataProfile columnsDataProfile, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateColumnsDataProfileAsync(viewItemId, annotationItemId, columnsDataProfile, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnsDataProfile'>
            /// columnsdataprofile payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateColumnsDataProfileHeaders> UpdateColumnsDataProfileAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, ColumnsDataProfile columnsDataProfile, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateColumnsDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, columnsDataProfile, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ColumnsDataProfileGet GetColumnsDataProfile(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetColumnsDataProfileAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ColumnsDataProfileGet> GetColumnsDataProfileAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetColumnsDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteColumnsDataProfileHeaders DeleteColumnsDataProfile(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteColumnsDataProfileAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete ColumnsDataProfile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteColumnsDataProfileHeaders> DeleteColumnsDataProfileAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteColumnsDataProfileWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnDescription'>
            /// columndescription payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateColumnDescriptionHeaders UpdateColumnDescription(this IQueryOperations operations, string viewItemId, string annotationItemId, ColumnDescription columnDescription, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateColumnDescriptionAsync(viewItemId, annotationItemId, columnDescription, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnDescription'>
            /// columndescription payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateColumnDescriptionHeaders> UpdateColumnDescriptionAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, ColumnDescription columnDescription, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateColumnDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, columnDescription, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ColumnDescriptionGet GetColumnDescription(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetColumnDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ColumnDescriptionGet> GetColumnDescriptionAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetColumnDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteColumnDescriptionHeaders DeleteColumnDescription(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteColumnDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete ColumnDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteColumnDescriptionHeaders> DeleteColumnDescriptionAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteColumnDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnTag'>
            /// columntag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateColumnTagHeaders UpdateColumnTag(this IQueryOperations operations, string viewItemId, string annotationItemId, ColumnTag columnTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateColumnTagAsync(viewItemId, annotationItemId, columnTag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnTag'>
            /// columntag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateColumnTagHeaders> UpdateColumnTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, ColumnTag columnTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateColumnTagWithHttpMessagesAsync(viewItemId, annotationItemId, columnTag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ColumnTagGet GetColumnTag(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetColumnTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ColumnTagGet> GetColumnTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetColumnTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteColumnTagHeaders DeleteColumnTag(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteColumnTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete ColumnTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteColumnTagHeaders> DeleteColumnTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteColumnTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnTermTag'>
            /// columntermtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdateColumnTermTagHeaders UpdateColumnTermTag(this IQueryOperations operations, string viewItemId, string annotationItemId, ColumnTermTag columnTermTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdateColumnTermTagAsync(viewItemId, annotationItemId, columnTermTag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='columnTermTag'>
            /// columntermtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdateColumnTermTagHeaders> UpdateColumnTermTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, ColumnTermTag columnTermTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateColumnTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, columnTermTag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ColumnTermTagGet GetColumnTermTag(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetColumnTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ColumnTermTagGet> GetColumnTermTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetColumnTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeleteColumnTermTagHeaders DeleteColumnTermTag(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeleteColumnTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete ColumnTermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeleteColumnTermTagHeaders> DeleteColumnTermTagAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteColumnTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Power
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='powerQuery'>
            /// powerquery payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryUpdatePowerHeaders UpdatePower(this IQueryOperations operations, string viewItemId, string annotationItemId, PowerQuery powerQuery, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).UpdatePowerAsync(viewItemId, annotationItemId, powerQuery, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Power
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='powerQuery'>
            /// powerquery payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryUpdatePowerHeaders> UpdatePowerAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, PowerQuery powerQuery, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdatePowerWithHttpMessagesAsync(viewItemId, annotationItemId, powerQuery, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Power
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static PowerQueryGet GetPower(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).GetPowerAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Power
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PowerQueryGet> GetPowerAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetPowerWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Power
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static QueryDeletePowerHeaders DeletePower(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IQueryOperations)s).DeletePowerAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Power
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<QueryDeletePowerHeaders> DeletePowerAsync(this IQueryOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeletePowerWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
