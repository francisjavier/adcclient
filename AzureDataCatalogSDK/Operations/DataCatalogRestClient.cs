// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

using System;
using AzureDataCatalogSDK.Authentication;
using AzureDataCatalogSDK.Configuration;

namespace Microsoft.Azure.DataCatalog.Rest
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public partial class DataCatalogRestClient : Microsoft.Rest.ServiceClient<DataCatalogRestClient>, IDataCatalogRestClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public Microsoft.Rest.ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// API version
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// Catalog name
        /// </summary>
        public string CatalogName { get; set; }

        /// <summary>
        /// Gets or sets the preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// Gets or sets the retry timeout in seconds for Long Running Operations.
        /// Default value is 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// When set to true a unique x-ms-client-request-id value is generated and
        /// included in each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the IContainerOperations.
        /// </summary>
        public virtual IContainerOperations Container { get; private set; }

        /// <summary>
        /// Gets the ITableOperations.
        /// </summary>
        public virtual ITableOperations Table { get; private set; }

        /// <summary>
        /// Gets the ICommandOperations.
        /// </summary>
        public virtual ICommandOperations Command { get; private set; }

        /// <summary>
        /// Gets the ITableValuedFunctionOperations.
        /// </summary>
        public virtual ITableValuedFunctionOperations TableValuedFunction { get; private set; }

        /// <summary>
        /// Gets the IReportOperations.
        /// </summary>
        public virtual IReportOperations Report { get; private set; }

        /// <summary>
        /// Gets the IKPIOperations.
        /// </summary>
        public virtual IKPIOperations KPI { get; private set; }

        /// <summary>
        /// Gets the IMeasureOperations.
        /// </summary>
        public virtual IMeasureOperations Measure { get; private set; }

        /// <summary>
        /// Gets the IQueryOperations.
        /// </summary>
        public virtual IQueryOperations Query { get; private set; }

        /// <summary>
        /// Gets the ICollectionOperations.
        /// </summary>
        public virtual ICollectionOperations Collection { get; private set; }

        public DataCatalogRestClient(ICachedADCTokenProvider cachedAdcTokenProvider, IDataCatalogConfiguration dataCatalogConfiguration)
        {
            if (dataCatalogConfiguration == null)
            {
                throw new System.ArgumentNullException("dataCatalogConfiguration");
            }
            if (dataCatalogConfiguration.BaseURI == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }

            var accessToken = cachedAdcTokenProvider.GetToken().GetAwaiter().GetResult();
            this.Credentials = new TokenCredentials(accessToken);

            this.BaseUri = new Uri(dataCatalogConfiguration.BaseURI);
            Credentials?.InitializeServiceClient(this);

            this.Initialize();
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.Container = new ContainerOperations(this);
            this.Table = new TableOperations(this);
            this.Command = new CommandOperations(this);
            this.TableValuedFunction = new TableValuedFunctionOperations(this);
            this.Report = new ReportOperations(this);
            this.KPI = new KPIOperations(this);
            this.Measure = new MeasureOperations(this);
            this.Query = new QueryOperations(this);
            this.Collection = new CollectionOperations(this);
            this.BaseUri = new System.Uri("https://api.azuredatacatalog.com/catalogs");
            this.ApiVersion = "2016-03-30";
            this.AcceptLanguage = "en-US";
            this.LongRunningOperationRetryTimeout = 30;
            this.GenerateClientRequestId = true;
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Azure.CloudErrorJsonConverter());
        }
    }
}