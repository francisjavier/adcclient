// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.DataCatalog.Rest.Models
{
    using System.Linq;

    /// <summary>
    /// Table assets
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Table
    {
        /// <summary>
        /// Initializes a new instance of the Table class.
        /// </summary>
        public Table() { }

        /// <summary>
        /// Initializes a new instance of the Table class.
        /// </summary>
        /// <param name="name">name property</param>
        /// <param name="fromSourceSystem">fromSourceSystem property</param>
        /// <param name="containerId">containerId property</param>
        /// <param name="descriptions">Description property, used to describe
        /// assets</param>
        /// <param name="experts">The data steward of the asset</param>
        /// <param name="tags">Taging the asset</param>
        /// <param name="termTags">Taging the asset using glossary terms, this
        /// is a feature only for standard SKU</param>
        /// <param name="previews">Data previews of the asset</param>
        /// <param name="tableDataProfiles">Data profiles of the table
        /// asset</param>
        /// <param name="columnsDataProfiles">Data profies of a column</param>
        /// <param name="columnDataClassifications">Tpye of data (e.g. post
        /// code) of a column</param>
        /// <param name="columnDescriptions">Descriptions of a column</param>
        /// <param name="columnTags">Tagging a column</param>
        /// <param name="columnTermTags">Tagging a column with glossary terms,
        /// this is a feature only for standard SKU </param>
        /// <param name="officeTelemetry">Office telemetry store</param>
        public Table(string name, Dsl dsl, DataSource dataSource, LastRegisteredBy lastRegisteredBy, bool fromSourceSystem, System.Collections.Generic.IList<RolesItem> roles = default(System.Collections.Generic.IList<RolesItem>), double? containerId = default(double?), System.Collections.Generic.IList<Description> descriptions = default(System.Collections.Generic.IList<Description>), System.Collections.Generic.IList<Expert> experts = default(System.Collections.Generic.IList<Expert>), AccessInstruction accessInstructions = default(AccessInstruction), Documentation documentation = default(Documentation), FriendlyName friendlyName = default(FriendlyName), System.Collections.Generic.IList<Tag> tags = default(System.Collections.Generic.IList<Tag>), System.Collections.Generic.IList<TermTag> termTags = default(System.Collections.Generic.IList<TermTag>), Schema schema = default(Schema), System.Collections.Generic.IList<Preview> previews = default(System.Collections.Generic.IList<Preview>), System.Collections.Generic.IList<TableDataProfile> tableDataProfiles = default(System.Collections.Generic.IList<TableDataProfile>), System.Collections.Generic.IList<ColumnsDataProfile> columnsDataProfiles = default(System.Collections.Generic.IList<ColumnsDataProfile>), System.Collections.Generic.IList<ColumnDataClassification> columnDataClassifications = default(System.Collections.Generic.IList<ColumnDataClassification>), System.Collections.Generic.IList<ColumnDescription> columnDescriptions = default(System.Collections.Generic.IList<ColumnDescription>), System.Collections.Generic.IList<ColumnTag> columnTags = default(System.Collections.Generic.IList<ColumnTag>), System.Collections.Generic.IList<ColumnTermTag> columnTermTags = default(System.Collections.Generic.IList<ColumnTermTag>), System.Collections.Generic.IList<OfficeTelemetry> officeTelemetry = default(System.Collections.Generic.IList<OfficeTelemetry>), OfficeTelemetryRule officeTelemetryRule = default(OfficeTelemetryRule))
        {
            Roles = roles;
            Name = name;
            Dsl = dsl;
            DataSource = dataSource;
            LastRegisteredBy = lastRegisteredBy;
            FromSourceSystem = fromSourceSystem;
            ContainerId = containerId;
            Descriptions = descriptions;
            Experts = experts;
            AccessInstructions = accessInstructions;
            Documentation = documentation;
            FriendlyName = friendlyName;
            Tags = tags;
            TermTags = termTags;
            Schema = schema;
            Previews = previews;
            TableDataProfiles = tableDataProfiles;
            ColumnsDataProfiles = columnsDataProfiles;
            ColumnDataClassifications = columnDataClassifications;
            ColumnDescriptions = columnDescriptions;
            ColumnTags = columnTags;
            ColumnTermTags = columnTermTags;
            OfficeTelemetry = officeTelemetry;
            OfficeTelemetryRule = officeTelemetryRule;
        }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "roles")]
        public System.Collections.Generic.IList<RolesItem> Roles { get; set; }

        /// <summary>
        /// Gets or sets name property
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dsl")]
        public Dsl Dsl { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataSource")]
        public DataSource DataSource { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastRegisteredBy")]
        public LastRegisteredBy LastRegisteredBy { get; set; }

        /// <summary>
        /// Gets or sets fromSourceSystem property
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.fromSourceSystem")]
        public bool FromSourceSystem { get; set; }

        /// <summary>
        /// Gets or sets containerId property
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containerId")]
        public double? ContainerId { get; set; }

        /// <summary>
        /// Gets or sets description property, used to describe assets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.descriptions")]
        public System.Collections.Generic.IList<Description> Descriptions { get; set; }

        /// <summary>
        /// Gets or sets the data steward of the asset
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.experts")]
        public System.Collections.Generic.IList<Expert> Experts { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.accessInstructions")]
        public AccessInstruction AccessInstructions { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.documentation")]
        public Documentation Documentation { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.friendlyName")]
        public FriendlyName FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets taging the asset
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.tags")]
        public System.Collections.Generic.IList<Tag> Tags { get; set; }

        /// <summary>
        /// Gets or sets taging the asset using glossary terms, this is a
        /// feature only for standard SKU
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.termTags")]
        public System.Collections.Generic.IList<TermTag> TermTags { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.schema")]
        public Schema Schema { get; set; }

        /// <summary>
        /// Gets or sets data previews of the asset
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.previews")]
        public System.Collections.Generic.IList<Preview> Previews { get; set; }

        /// <summary>
        /// Gets or sets data profiles of the table asset
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.tableDataProfiles")]
        public System.Collections.Generic.IList<TableDataProfile> TableDataProfiles { get; set; }

        /// <summary>
        /// Gets or sets data profies of a column
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.columnsDataProfiles")]
        public System.Collections.Generic.IList<ColumnsDataProfile> ColumnsDataProfiles { get; set; }

        /// <summary>
        /// Gets or sets tpye of data (e.g. post code) of a column
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.columnDataClassifications")]
        public System.Collections.Generic.IList<ColumnDataClassification> ColumnDataClassifications { get; set; }

        /// <summary>
        /// Gets or sets descriptions of a column
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.columnDescriptions")]
        public System.Collections.Generic.IList<ColumnDescription> ColumnDescriptions { get; set; }

        /// <summary>
        /// Gets or sets tagging a column
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.columnTags")]
        public System.Collections.Generic.IList<ColumnTag> ColumnTags { get; set; }

        /// <summary>
        /// Gets or sets tagging a column with glossary terms, this is a
        /// feature only for standard SKU
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.columnTermTags")]
        public System.Collections.Generic.IList<ColumnTermTag> ColumnTermTags { get; set; }

        /// <summary>
        /// Gets or sets office telemetry store
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.officeTelemetry")]
        public System.Collections.Generic.IList<OfficeTelemetry> OfficeTelemetry { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations.officeTelemetryRule")]
        public OfficeTelemetryRule OfficeTelemetryRule { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (Dsl == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Dsl");
            }
            if (DataSource == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DataSource");
            }
            if (LastRegisteredBy == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "LastRegisteredBy");
            }
            if (this.Roles != null)
            {
                foreach (var element in this.Roles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Dsl != null)
            {
                this.Dsl.Validate();
            }
            if (this.DataSource != null)
            {
                this.DataSource.Validate();
            }
            if (this.LastRegisteredBy != null)
            {
                this.LastRegisteredBy.Validate();
            }
            if (this.Descriptions != null)
            {
                foreach (var element1 in this.Descriptions)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.Experts != null)
            {
                foreach (var element2 in this.Experts)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (this.AccessInstructions != null)
            {
                this.AccessInstructions.Validate();
            }
            if (this.Documentation != null)
            {
                this.Documentation.Validate();
            }
            if (this.FriendlyName != null)
            {
                this.FriendlyName.Validate();
            }
            if (this.Tags != null)
            {
                foreach (var element3 in this.Tags)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (this.TermTags != null)
            {
                foreach (var element4 in this.TermTags)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
            if (this.Schema != null)
            {
                this.Schema.Validate();
            }
            if (this.Previews != null)
            {
                foreach (var element5 in this.Previews)
                {
                    if (element5 != null)
                    {
                        element5.Validate();
                    }
                }
            }
            if (this.TableDataProfiles != null)
            {
                foreach (var element6 in this.TableDataProfiles)
                {
                    if (element6 != null)
                    {
                        element6.Validate();
                    }
                }
            }
            if (this.ColumnsDataProfiles != null)
            {
                foreach (var element7 in this.ColumnsDataProfiles)
                {
                    if (element7 != null)
                    {
                        element7.Validate();
                    }
                }
            }
            if (this.ColumnDataClassifications != null)
            {
                foreach (var element8 in this.ColumnDataClassifications)
                {
                    if (element8 != null)
                    {
                        element8.Validate();
                    }
                }
            }
            if (this.ColumnDescriptions != null)
            {
                foreach (var element9 in this.ColumnDescriptions)
                {
                    if (element9 != null)
                    {
                        element9.Validate();
                    }
                }
            }
            if (this.ColumnTags != null)
            {
                foreach (var element10 in this.ColumnTags)
                {
                    if (element10 != null)
                    {
                        element10.Validate();
                    }
                }
            }
            if (this.ColumnTermTags != null)
            {
                foreach (var element11 in this.ColumnTermTags)
                {
                    if (element11 != null)
                    {
                        element11.Validate();
                    }
                }
            }
            if (this.OfficeTelemetry != null)
            {
                foreach (var element12 in this.OfficeTelemetry)
                {
                    if (element12 != null)
                    {
                        element12.Validate();
                    }
                }
            }
            if (this.OfficeTelemetryRule != null)
            {
                this.OfficeTelemetryRule.Validate();
            }
        }
    }
}
