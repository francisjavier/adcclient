// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.DataCatalog.Rest
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for CollectionOperations.
    /// </summary>
    public static partial class CollectionOperationsExtensions
    {
            /// <summary>
            /// Register Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collection'>
            /// Register Collection
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static CollectionRegisterHeaders Register(this ICollectionOperations operations, Collection collection, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).RegisterAsync(collection, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collection'>
            /// Register Collection
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionRegisterHeaders> RegisterAsync(this ICollectionOperations operations, Collection collection, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(collection, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static CollectionGet Get(this ICollectionOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).GetAsync(viewItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionGet> GetAsync(this ICollectionOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(viewItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionDeleteHeaders Delete(this ICollectionOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).DeleteAsync(viewItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionDeleteHeaders> DeleteAsync(this ICollectionOperations operations, string viewItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(viewItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static CollectionAddDescriptionHeaders AddDescription(this ICollectionOperations operations, string viewItemId, Description description, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).AddDescriptionAsync(viewItemId, description, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionAddDescriptionHeaders> AddDescriptionAsync(this ICollectionOperations operations, string viewItemId, Description description, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddDescriptionWithHttpMessagesAsync(viewItemId, description, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static CollectionAddExpertHeaders AddExpert(this ICollectionOperations operations, string viewItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).AddExpertAsync(viewItemId, expert, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionAddExpertHeaders> AddExpertAsync(this ICollectionOperations operations, string viewItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddExpertWithHttpMessagesAsync(viewItemId, expert, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static CollectionAddAccessInstructionHeaders AddAccessInstruction(this ICollectionOperations operations, string viewItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).AddAccessInstructionAsync(viewItemId, accessInstruction, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionAddAccessInstructionHeaders> AddAccessInstructionAsync(this ICollectionOperations operations, string viewItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddAccessInstructionWithHttpMessagesAsync(viewItemId, accessInstruction, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static CollectionAddDocumentationHeaders AddDocumentation(this ICollectionOperations operations, string viewItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).AddDocumentationAsync(viewItemId, documentation, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionAddDocumentationHeaders> AddDocumentationAsync(this ICollectionOperations operations, string viewItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddDocumentationWithHttpMessagesAsync(viewItemId, documentation, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static CollectionAddFriendlyNameHeaders AddFriendlyName(this ICollectionOperations operations, string viewItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).AddFriendlyNameAsync(viewItemId, friendlyName, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionAddFriendlyNameHeaders> AddFriendlyNameAsync(this ICollectionOperations operations, string viewItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddFriendlyNameWithHttpMessagesAsync(viewItemId, friendlyName, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static CollectionAddTagHeaders AddTag(this ICollectionOperations operations, string viewItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).AddTagAsync(viewItemId, tag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionAddTagHeaders> AddTagAsync(this ICollectionOperations operations, string viewItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddTagWithHttpMessagesAsync(viewItemId, tag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static CollectionAddTermTagHeaders AddTermTag(this ICollectionOperations operations, string viewItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).AddTermTagAsync(viewItemId, termTag, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionAddTermTagHeaders> AddTermTagAsync(this ICollectionOperations operations, string viewItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddTermTagWithHttpMessagesAsync(viewItemId, termTag, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionUpdateDescriptionHeaders UpdateDescription(this ICollectionOperations operations, string viewItemId, string annotationItemId, Description description, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).UpdateDescriptionAsync(viewItemId, annotationItemId, description, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='description'>
            /// description payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionUpdateDescriptionHeaders> UpdateDescriptionAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Description description, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, description, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static DescriptionGet GetDescription(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).GetDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DescriptionGet> GetDescriptionAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionDeleteDescriptionHeaders DeleteDescription(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).DeleteDescriptionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Description
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionDeleteDescriptionHeaders> DeleteDescriptionAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteDescriptionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionUpdateExpertHeaders UpdateExpert(this ICollectionOperations operations, string viewItemId, string annotationItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).UpdateExpertAsync(viewItemId, annotationItemId, expert, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='expert'>
            /// expert payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionUpdateExpertHeaders> UpdateExpertAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Expert expert, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateExpertWithHttpMessagesAsync(viewItemId, annotationItemId, expert, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static ExpertGet GetExpert(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).GetExpertAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ExpertGet> GetExpertAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetExpertWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionDeleteExpertHeaders DeleteExpert(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).DeleteExpertAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Expert
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionDeleteExpertHeaders> DeleteExpertAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteExpertWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionUpdateAccessInstructionHeaders UpdateAccessInstruction(this ICollectionOperations operations, string viewItemId, string annotationItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).UpdateAccessInstructionAsync(viewItemId, annotationItemId, accessInstruction, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='accessInstruction'>
            /// accessinstruction payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionUpdateAccessInstructionHeaders> UpdateAccessInstructionAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, AccessInstruction accessInstruction, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, accessInstruction, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static AccessInstructionGet GetAccessInstruction(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).GetAccessInstructionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AccessInstructionGet> GetAccessInstructionAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionDeleteAccessInstructionHeaders DeleteAccessInstruction(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).DeleteAccessInstructionAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete AccessInstruction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionDeleteAccessInstructionHeaders> DeleteAccessInstructionAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteAccessInstructionWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionUpdateDocumentationHeaders UpdateDocumentation(this ICollectionOperations operations, string viewItemId, string annotationItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).UpdateDocumentationAsync(viewItemId, annotationItemId, documentation, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='documentation'>
            /// documentation payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionUpdateDocumentationHeaders> UpdateDocumentationAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Documentation documentation, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, documentation, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static DocumentationGet GetDocumentation(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).GetDocumentationAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DocumentationGet> GetDocumentationAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionDeleteDocumentationHeaders DeleteDocumentation(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).DeleteDocumentationAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Documentation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionDeleteDocumentationHeaders> DeleteDocumentationAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteDocumentationWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionUpdateFriendlyNameHeaders UpdateFriendlyName(this ICollectionOperations operations, string viewItemId, string annotationItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).UpdateFriendlyNameAsync(viewItemId, annotationItemId, friendlyName, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='friendlyName'>
            /// friendlyname payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionUpdateFriendlyNameHeaders> UpdateFriendlyNameAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, FriendlyName friendlyName, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, friendlyName, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static FriendlyNameGet GetFriendlyName(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).GetFriendlyNameAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<FriendlyNameGet> GetFriendlyNameAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionDeleteFriendlyNameHeaders DeleteFriendlyName(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).DeleteFriendlyNameAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete FriendlyName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionDeleteFriendlyNameHeaders> DeleteFriendlyNameAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteFriendlyNameWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionUpdateTagHeaders UpdateTag(this ICollectionOperations operations, string viewItemId, string annotationItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).UpdateTagAsync(viewItemId, annotationItemId, tag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='tag'>
            /// tag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionUpdateTagHeaders> UpdateTagAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Tag tag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateTagWithHttpMessagesAsync(viewItemId, annotationItemId, tag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TagGet GetTag(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).GetTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TagGet> GetTagAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionDeleteTagHeaders DeleteTag(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).DeleteTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Tag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionDeleteTagHeaders> DeleteTagAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionUpdateTermTagHeaders UpdateTermTag(this ICollectionOperations operations, string viewItemId, string annotationItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).UpdateTermTagAsync(viewItemId, annotationItemId, termTag, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='termTag'>
            /// termtag payload
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionUpdateTermTagHeaders> UpdateTermTagAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, TermTag termTag, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, termTag, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            public static TermTagGet GetTermTag(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).GetTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TermTagGet> GetTermTagAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            public static CollectionDeleteTermTagHeaders DeleteTermTag(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICollectionOperations)s).DeleteTermTagAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete TermTag
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewItemId'>
            /// View item Id
            /// </param>
            /// <param name='annotationItemId'>
            /// Annotation item Id
            /// </param>
            /// <param name='settings'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// x-ms-client-request-id
            /// </param>
            /// <param name='ifMatch'>
            /// If-Match
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CollectionDeleteTermTagHeaders> DeleteTermTagAsync(this ICollectionOperations operations, string viewItemId, string annotationItemId, Settings settings, string xMsClientRequestId = default(string), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTermTagWithHttpMessagesAsync(viewItemId, annotationItemId, settings, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
